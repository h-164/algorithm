function solution(operations) {
    var answer = [0,0];
    
 class MinHeap {
  constructor() {
    this.heap = [];
    this.length = 0;
  }

  push(node) {
    this.heap.push(node);
    this.length++;
    let index = this.length - 1;
    if (this.length !== 1) {
      this.swap(index, node);
    }
  }

  swap(childIndex, child) {
    let parentIndex = parseInt((childIndex - 1) / 2);
    if (child < this.heap[parentIndex]) {
      this.heap[childIndex] = this.heap[parentIndex];
      this.heap[parentIndex] = child;
      this.swap(parentIndex, child);
    }
  }

  minPop() {
    if (this.length === 0) {
      return;
    }
    let pop = this.heap[0];
    this.heap[0] = this.heap[this.length - 1];
    this.heap.pop();
    this.length--;
    this.popSwap(0, this.heap[0]);
    return pop;
  }

  popSwap(parentIndex) {
    while (true) {
      let leftChild = parentIndex * 2 + 1;
      let rightChild = parentIndex * 2 + 2;
      let smallest = parentIndex;

      if (leftChild >= this.length) {
        break;
      }

      if (this.heap[leftChild] < this.heap[smallest]) {
        smallest = leftChild;
      }

      if (
        rightChild < this.length &&
        this.heap[rightChild] < this.heap[smallest]
      ) {
        smallest = rightChild;
      }

      if (smallest !== parentIndex) {
        [this.heap[parentIndex], this.heap[smallest]] = [
          this.heap[smallest],
          this.heap[parentIndex],
        ];
        parentIndex = smallest;
      } else {
        break;
      }
    }
  }
    
   maxPop(){
       if(this.length===0){
        return;
       }
      
       let index = Math.ceil((this.length-1)/2);
       let arr = []
       console.log(this.length)
       console.log(index)
       
       for(let i = index; i < this.length; i++){
           arr.push(this.heap[i])
       }
       
       arr.sort((a, b) => a - b);
       let max = arr[arr.length-1]
       
       let maxIndex = this.heap.indexOf(max)
       this.heap.splice(maxIndex,1)
       this.length--
       
       return max
   } 
}
    
    const minHeap = new MinHeap;

    for(let i = 0; i < operations.length; i++){
        let operation = operations[i].split(" ")
        if(operation[0]==="I"){
            minHeap.push(+operation[1])
        }else if(operation[0]==="D" && operation[1]==="-1"){
            minHeap.minPop()
        }else if(operation[0]==="D" && operation[1]==="1"){
            minHeap.maxPop()
        }
    }
    
    if(minHeap.length!==0){
    answer[0]=minHeap.maxPop()
    answer[1]=minHeap.heap[0]
    }
    
    return answer;
}
